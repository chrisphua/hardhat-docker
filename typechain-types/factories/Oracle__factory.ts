/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Oracle, OracleInterface } from "../Oracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "urlToQuery",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "attributeToFetch",
        type: "string",
      },
    ],
    name: "NewRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "urlToQuery",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "attributeToFetch",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "agreedValue",
        type: "string",
      },
    ],
    name: "UpdatedRequest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_urlToQuery",
        type: "string",
      },
      {
        internalType: "string",
        name: "_attributeToFetch",
        type: "string",
      },
    ],
    name: "createRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minQuorum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "urlToQuery",
        type: "string",
      },
      {
        internalType: "string",
        name: "attributeToFetch",
        type: "string",
      },
      {
        internalType: "string",
        name: "agreedValue",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalOracleCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_valueRetrieved",
        type: "string",
      },
    ],
    name: "updateRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015560036002556003805534801561001e57600080fd5b50610dbf8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806381d12c581461006757806399cc7f601461009a578063b5a127e5146100b8578063cfb0ac99146100d6578063df89f819146100f2578063e00dd1611461010e575b600080fd5b610081600480360381019061007c91906108fc565b61012c565b6040516100919493929190610aa1565b60405180910390f35b6100a26102f4565b6040516100af9190610a41565b60405180910390f35b6100c06102fa565b6040516100cd9190610a41565b60405180910390f35b6100f060048036038101906100eb9190610925565b610300565b005b61010c60048036038101906101079190610890565b610582565b005b61011661076a565b6040516101239190610a41565b60405180910390f35b600060205280600052604060002060009150905080600001549080600101805461015590610c28565b80601f016020809104026020016040519081016040528092919081815260200182805461018190610c28565b80156101ce5780601f106101a3576101008083540402835291602001916101ce565b820191906000526020600020905b8154815290600101906020018083116101b157829003601f168201915b5050505050908060020180546101e390610c28565b80601f016020809104026020016040519081016040528092919081815260200182805461020f90610c28565b801561025c5780601f106102315761010080835404028352916020019161025c565b820191906000526020600020905b81548152906001019060200180831161023f57829003601f168201915b50505050509080600301805461027190610c28565b80601f016020809104026020016040519081016040528092919081815260200182805461029d90610c28565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b5050505050905084565b60035481565b60025481565b6000806000848152602001908152602001600020905060018160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561057d5760028160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000805b8061041c57600083600401600084815260200190815260200160002080546103d290610c28565b905014156104095760019050838360040160008481526020019081526020016000209080519060200190610407929190610770565b505b818061041490610c8b565b9250506103ab565b6000805b600354811015610578576000856004016000838152602001908152602001600020805461044c90610c28565b80601f016020809104026020016040519081016040528092919081815260200182805461047890610c28565b80156104c55780601f1061049a576101008083540402835291602001916104c5565b820191906000526020600020905b8154815290600101906020018083116104a857829003601f168201915b5050505050905060008790508080519060200120828051906020012014156105635783806104f290610c8b565b94505060025484106105625787876003019080519060200190610516929190610770565b507f51f1e1f00d186e79f8ea7c82be079fcdd49fe881904a9cdc1903345eb69d3831876000015488600101896002018a6003016040516105599493929190610afb565b60405180910390a15b5b5050808061057090610c8b565b915050610420565b505050505b505050565b6000806000600154815260200190815260200160002090506001548160000181905550828160010190805190602001906105bd929190610770565b50818160020190805190602001906105d6929190610770565b50604051806020016040528060008152508160030190805190602001906105fe929190610770565b5060018160050160007370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001816005016000733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018160050160007390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f0312239616abfb14f7ffa065155abb0ca047274d86c965890db4c8a48b8ce4b6600154848460405161074593929190610a5c565b60405180910390a16001600081548092919061076090610c8b565b9190505550505050565b60015481565b82805461077c90610c28565b90600052602060002090601f01602090048101928261079e57600085556107e5565b82601f106107b757805160ff19168380011785556107e5565b828001600101855582156107e5579182015b828111156107e45782518255916020019190600101906107c9565b5b5090506107f291906107f6565b5090565b5b8082111561080f5760008160009055506001016107f7565b5090565b600061082661082184610b7a565b610b55565b90508281526020810184848401111561083e57600080fd5b610849848285610be6565b509392505050565b600082601f83011261086257600080fd5b8135610872848260208601610813565b91505092915050565b60008135905061088a81610d72565b92915050565b600080604083850312156108a357600080fd5b600083013567ffffffffffffffff8111156108bd57600080fd5b6108c985828601610851565b925050602083013567ffffffffffffffff8111156108e657600080fd5b6108f285828601610851565b9150509250929050565b60006020828403121561090e57600080fd5b600061091c8482850161087b565b91505092915050565b6000806040838503121561093857600080fd5b60006109468582860161087b565b925050602083013567ffffffffffffffff81111561096357600080fd5b61096f85828601610851565b9150509250929050565b600061098482610bc0565b61098e8185610bcb565b935061099e818560208601610bf5565b6109a781610d61565b840191505092915050565b600081546109bf81610c28565b6109c98186610bcb565b945060018216600081146109e457600181146109f657610a29565b60ff1983168652602086019350610a29565b6109ff85610bab565b60005b83811015610a2157815481890152600182019150602081019050610a02565b808801955050505b50505092915050565b610a3b81610bdc565b82525050565b6000602082019050610a566000830184610a32565b92915050565b6000606082019050610a716000830186610a32565b8181036020830152610a838185610979565b90508181036040830152610a978184610979565b9050949350505050565b6000608082019050610ab66000830187610a32565b8181036020830152610ac88186610979565b90508181036040830152610adc8185610979565b90508181036060830152610af08184610979565b905095945050505050565b6000608082019050610b106000830187610a32565b8181036020830152610b2281866109b2565b90508181036040830152610b3681856109b2565b90508181036060830152610b4a81846109b2565b905095945050505050565b6000610b5f610b70565b9050610b6b8282610c5a565b919050565b6000604051905090565b600067ffffffffffffffff821115610b9557610b94610d32565b5b610b9e82610d61565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610c13578082015181840152602081019050610bf8565b83811115610c22576000848401525b50505050565b60006002820490506001821680610c4057607f821691505b60208210811415610c5457610c53610d03565b5b50919050565b610c6382610d61565b810181811067ffffffffffffffff82111715610c8257610c81610d32565b5b80604052505050565b6000610c9682610bdc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cc957610cc8610cd4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610d7b81610bdc565b8114610d8657600080fd5b5056fea2646970667358221220eb16568a6bb58ae5ef7af144985ffc7fb788b536aa5801ca497ef707c38fe2ba64736f6c63430008040033";

type OracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Oracle__factory extends ContractFactory {
  constructor(...args: OracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Oracle";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Oracle> {
    return super.deploy(overrides || {}) as Promise<Oracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Oracle {
    return super.attach(address) as Oracle;
  }
  connect(signer: Signer): Oracle__factory {
    return super.connect(signer) as Oracle__factory;
  }
  static readonly contractName: "Oracle";
  public readonly contractName: "Oracle";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleInterface {
    return new utils.Interface(_abi) as OracleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Oracle {
    return new Contract(address, _abi, signerOrProvider) as Oracle;
  }
}
